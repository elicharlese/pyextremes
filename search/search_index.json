{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pyextremes Extreme Value Analysis (EVA) in Python pyextremes is a Python library aimed at performing univariate Extreme Value Analysis ( EVA ) Features \u00b6 pyextremes provides tools necessary to perform a wide range of tasks required to perform EVA , such as: extraction of extreme events from time series using methods such as Block Maxima ( BM ) or Peaks Over Threshold ( POT ) fitting continuous distributions, such as GEVD , GPD , or user-specified continous distributions to the extracted extreme events visualization of model inputs, results, and goodness-of-fit statistics estimation of extreme events of given probability or return period (e.g. 100-year event) and of corresponding confidence intervals tools assisting with model selection and tuning, such as selection of block size in BM and threshold in POT Framework provided by the pyextremes library is easy to use and requires minimum user input to get production-ready results. Its default parameters are configured in compliance with best industry standards and underlying models are heavily based in the Extreme Value theory. The largest source of inspiration for this library was the book \"An Introduction to Statistical Modeling of Extreme Values\" by Stuart Coles. In addition to the easy-to-use interface, the library provides interface to underlying tools which can be used to build custom models. All scipy continuous distributions are supported out-of-the-box. Custom distributions can be also provided by subclassing scipy.stats.rv_continuous . Any parameter of a distribution may be frozen to investigate degenerate models (e.g. GEVD -> Gumbel or GPD -> Exponential ). Multiple ways of fitting the continuous distributions to the data are supported: MLE (default model) - Maximum Likelihood Estimate, uses SciPy Emcee - Markov Chain Monte Calro, see Emcee package by Dan Foreman-Mackey Installation \u00b6 Get latest version from PyPI: pip install pyextremes Get latest experimental build from GitHub: pip install git+https://github.com/georgebv/pyextremes For Anaconda Python distributions: conda install -c conda-forge pyextremes Dependencies \u00b6 Package Description emcee fit models using the Markov Chain Monte Carlo method matplotlib produce figures numpy perform efficient operations with arrays pandas Series and DataFrame objects for model intput and output scipy statistical models and mathematic functions License \u00b6 This project is licensed under the terms of the MIT license.","title":"pyextremes"},{"location":"#features","text":"pyextremes provides tools necessary to perform a wide range of tasks required to perform EVA , such as: extraction of extreme events from time series using methods such as Block Maxima ( BM ) or Peaks Over Threshold ( POT ) fitting continuous distributions, such as GEVD , GPD , or user-specified continous distributions to the extracted extreme events visualization of model inputs, results, and goodness-of-fit statistics estimation of extreme events of given probability or return period (e.g. 100-year event) and of corresponding confidence intervals tools assisting with model selection and tuning, such as selection of block size in BM and threshold in POT Framework provided by the pyextremes library is easy to use and requires minimum user input to get production-ready results. Its default parameters are configured in compliance with best industry standards and underlying models are heavily based in the Extreme Value theory. The largest source of inspiration for this library was the book \"An Introduction to Statistical Modeling of Extreme Values\" by Stuart Coles. In addition to the easy-to-use interface, the library provides interface to underlying tools which can be used to build custom models. All scipy continuous distributions are supported out-of-the-box. Custom distributions can be also provided by subclassing scipy.stats.rv_continuous . Any parameter of a distribution may be frozen to investigate degenerate models (e.g. GEVD -> Gumbel or GPD -> Exponential ). Multiple ways of fitting the continuous distributions to the data are supported: MLE (default model) - Maximum Likelihood Estimate, uses SciPy Emcee - Markov Chain Monte Calro, see Emcee package by Dan Foreman-Mackey","title":"Features"},{"location":"#installation","text":"Get latest version from PyPI: pip install pyextremes Get latest experimental build from GitHub: pip install git+https://github.com/georgebv/pyextremes For Anaconda Python distributions: conda install -c conda-forge pyextremes","title":"Installation"},{"location":"#dependencies","text":"Package Description emcee fit models using the Markov Chain Monte Carlo method matplotlib produce figures numpy perform efficient operations with arrays pandas Series and DataFrame objects for model intput and output scipy statistical models and mathematic functions","title":"Dependencies"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"quickstart/","text":"Read data \u00b6 Every pyextremes model starts with a pandas.Series (see pandas documentation ) object, which contains timeseries of data you want to analyze. This example is based on water level data for \"The Battery\" station located in New York. Read data: 1 2 3 4 5 6 7 8 import pandas as pd series = pd . read_csv ( \"battery_wl.csv\" , index_col = 0 , parse_dates = True , squeeze = True , ) Tip The battery_wl.csv file referenced above is used throughout many tutorials and examples for the pyextremes package. If you want to reproduce all steps shown here and get the same results, the file can be downloaded here . Clean up data \u00b6 In order for the analysis results to be meaningful, data needs to be pre-processed by the user. This may include removal of data gaps, detrending, interpolation, removal of outliers, etc. Let's clean up the data: Code 9 10 11 12 13 14 15 16 series = ( series . sort_index ( ascending = True ) . astype ( float ) . dropna () ) series = series . loc [ pd . to_datetime ( \"1925\" ):] series = series - ( series . index . array - pd . to_datetime ( \"1992\" )) / pd . to_timedelta ( \"365.2425D\" ) * 2.87e-3 When printed print ( series . head ()) Date-Time (GMT) 1926-11-20 05:00:00 -0.411120 1926-11-20 06:00:00 -0.777120 1926-11-20 07:00:00 -1.051120 1926-11-20 08:00:00 -1.051121 1926-11-20 09:00:00 -0.808121 Name: Water Elevation [m NAVD88], dtype: float64 Note See this tutorial for more information on why these specific operations were done. Create model \u00b6 The primary interface to the pyextremes library is provided via the EVA class. This class is responsible for all major tasks outlined above and is created using a simple command: 17 18 19 from pyextremes import EVA model = EVA ( series ) Extract extreme values \u00b6 The first step of extreme value analysis is extraction of extreme values from the timeseries. This is done by using the get_extremes method of the EVA class. In this example extremes will be extracted using the BM method and 1-year block_size , which give us annual maxima series. Code 20 model . get_extremes ( method = \"BM\" , block_size = \"365.2425D\" ) When printed print ( model . extremes . head ()) Date-Time (GMT) 1927-02-20 16:00:00 1.670154 1927-12-05 10:00:00 1.432893 1929-04-16 19:00:00 1.409977 1930-08-23 01:00:00 1.202101 1931-03-08 17:00:00 1.529547 Name: Water Elevation [m NAVD88], dtype: float64 Visualize extreme events \u00b6 model . plot_extremes () Fit a model \u00b6 The next step is selecting a model and fitting to the extracted extreme events. What this means practically is that we need to find model parameters (such as shape, location and scale for GEVD or GPD ) that maximize or minimize some metric (likelihood) and give us the best fit possible. This is done by calling the fit_model method: 21 model . fit_model () Info By default, the fit_model method selects the best model applicable to extracted extremes using the Akaike Information Criterion (AIC). Calculate return values \u00b6 The final goal of most EVA 's is estimation of return values. The simplest way to do this is by using the get_summary method: 22 23 24 25 26 summary = model . get_summary ( return_period = [ 1 , 2 , 5 , 10 , 25 , 50 , 100 , 250 , 500 , 1000 ], alpha = 0.95 , n_samples = 1000 , ) Note By default return period size is set to one year, which is defined as the mean year from the Gregorian calendar ( 365.2425 days ). This means that a return period of 100 corresponds to a 100-year event. A different return period size can be specified using the return_period_size argument. A value of 30D (30 days) would mean that a return period of 12 corresponds to approximately one year. Print the results: print ( summary ) return value lower ci upper ci return period 1.0 0.802610 -0.270608 1.024385 2.0 1.409343 1.370929 1.452727 5.0 1.622565 1.540408 1.710116 10.0 1.803499 1.678816 1.955386 25.0 2.090267 1.851597 2.417670 50.0 2.354889 1.992022 2.906734 100.0 2.671313 2.145480 3.568418 250.0 3.188356 2.346609 4.856107 500.0 3.671580 2.517831 6.232830 1000.0 4.252220 2.702800 8.036243 Investigate model \u00b6 After model results are obtained, logical questions naturally arise - how good is the model, are the obtained results meaningful, and how confident can I be with the estimated return values. One way to do that is by visually inspecting the model: 27 model . plot_diagnostic ( alpha = 0.95 ) Recap \u00b6 Following this example you should be able to do the following: set up an EVA instance extract extreme events fit a model get results For more in-depth tutorials on features of pyextremes see the User Guide.","title":"Quick Start"},{"location":"quickstart/#read-data","text":"Every pyextremes model starts with a pandas.Series (see pandas documentation ) object, which contains timeseries of data you want to analyze. This example is based on water level data for \"The Battery\" station located in New York. Read data: 1 2 3 4 5 6 7 8 import pandas as pd series = pd . read_csv ( \"battery_wl.csv\" , index_col = 0 , parse_dates = True , squeeze = True , ) Tip The battery_wl.csv file referenced above is used throughout many tutorials and examples for the pyextremes package. If you want to reproduce all steps shown here and get the same results, the file can be downloaded here .","title":"Read data"},{"location":"quickstart/#clean-up-data","text":"In order for the analysis results to be meaningful, data needs to be pre-processed by the user. This may include removal of data gaps, detrending, interpolation, removal of outliers, etc. Let's clean up the data: Code 9 10 11 12 13 14 15 16 series = ( series . sort_index ( ascending = True ) . astype ( float ) . dropna () ) series = series . loc [ pd . to_datetime ( \"1925\" ):] series = series - ( series . index . array - pd . to_datetime ( \"1992\" )) / pd . to_timedelta ( \"365.2425D\" ) * 2.87e-3 When printed print ( series . head ()) Date-Time (GMT) 1926-11-20 05:00:00 -0.411120 1926-11-20 06:00:00 -0.777120 1926-11-20 07:00:00 -1.051120 1926-11-20 08:00:00 -1.051121 1926-11-20 09:00:00 -0.808121 Name: Water Elevation [m NAVD88], dtype: float64 Note See this tutorial for more information on why these specific operations were done.","title":"Clean up data"},{"location":"quickstart/#create-model","text":"The primary interface to the pyextremes library is provided via the EVA class. This class is responsible for all major tasks outlined above and is created using a simple command: 17 18 19 from pyextremes import EVA model = EVA ( series )","title":"Create model"},{"location":"quickstart/#extract-extreme-values","text":"The first step of extreme value analysis is extraction of extreme values from the timeseries. This is done by using the get_extremes method of the EVA class. In this example extremes will be extracted using the BM method and 1-year block_size , which give us annual maxima series. Code 20 model . get_extremes ( method = \"BM\" , block_size = \"365.2425D\" ) When printed print ( model . extremes . head ()) Date-Time (GMT) 1927-02-20 16:00:00 1.670154 1927-12-05 10:00:00 1.432893 1929-04-16 19:00:00 1.409977 1930-08-23 01:00:00 1.202101 1931-03-08 17:00:00 1.529547 Name: Water Elevation [m NAVD88], dtype: float64","title":"Extract extreme values"},{"location":"quickstart/#visualize-extreme-events","text":"model . plot_extremes ()","title":"Visualize extreme events"},{"location":"quickstart/#fit-a-model","text":"The next step is selecting a model and fitting to the extracted extreme events. What this means practically is that we need to find model parameters (such as shape, location and scale for GEVD or GPD ) that maximize or minimize some metric (likelihood) and give us the best fit possible. This is done by calling the fit_model method: 21 model . fit_model () Info By default, the fit_model method selects the best model applicable to extracted extremes using the Akaike Information Criterion (AIC).","title":"Fit a model"},{"location":"quickstart/#calculate-return-values","text":"The final goal of most EVA 's is estimation of return values. The simplest way to do this is by using the get_summary method: 22 23 24 25 26 summary = model . get_summary ( return_period = [ 1 , 2 , 5 , 10 , 25 , 50 , 100 , 250 , 500 , 1000 ], alpha = 0.95 , n_samples = 1000 , ) Note By default return period size is set to one year, which is defined as the mean year from the Gregorian calendar ( 365.2425 days ). This means that a return period of 100 corresponds to a 100-year event. A different return period size can be specified using the return_period_size argument. A value of 30D (30 days) would mean that a return period of 12 corresponds to approximately one year. Print the results: print ( summary ) return value lower ci upper ci return period 1.0 0.802610 -0.270608 1.024385 2.0 1.409343 1.370929 1.452727 5.0 1.622565 1.540408 1.710116 10.0 1.803499 1.678816 1.955386 25.0 2.090267 1.851597 2.417670 50.0 2.354889 1.992022 2.906734 100.0 2.671313 2.145480 3.568418 250.0 3.188356 2.346609 4.856107 500.0 3.671580 2.517831 6.232830 1000.0 4.252220 2.702800 8.036243","title":"Calculate return values"},{"location":"quickstart/#investigate-model","text":"After model results are obtained, logical questions naturally arise - how good is the model, are the obtained results meaningful, and how confident can I be with the estimated return values. One way to do that is by visually inspecting the model: 27 model . plot_diagnostic ( alpha = 0.95 )","title":"Investigate model"},{"location":"quickstart/#recap","text":"Following this example you should be able to do the following: set up an EVA instance extract extreme events fit a model get results For more in-depth tutorials on features of pyextremes see the User Guide.","title":"Recap"},{"location":"includes/abbreviations/","text":"","title":"Abbreviations"},{"location":"user-guide/read-first/","text":"Disclaimer \u00b6 pyextremes was created to make the process of running EVA simpler and faster. While the project is built with reasonable defaults which produce good results in most cases, one should not rely on the model as a source of ground truth. It is always the responsibility of the user to understand the subject of analysis and to properly interpret the model outputs. Example A 1000-year wave height of 50 meters is not physical and is an artifact of the underlying statistical model. One should always be mindful of the actual process being modeled and remember that the model gives a proabilistic estimate of extreme values under the assumption that the selected model (e.g. GEVD or GPD ) correctly describes the real process. Tutorial Structure \u00b6 pyextremes consists of individual components (e.g. extreme value extraction, model fitting, visualization, etc.) which can be used to perform a variety of tasks related to EVA . In order to make life easier, these components were grouped together in a helper class EVA (located in pyextremes.eva.EVA ) to implement the most common workflow of EVA . Because of this, almost every problem can generally be solved using either EVA or one or more individual components. This allows for the library to be flexible and makes it easy to integrate into custom workflows. Each tutorial section covers a particular area of EVA , such as extreme value extraction. Solutions are presented both using the EVA class and individual component used by the EVA class behind the scenes. Users should be aware that the EVA class shown earlier is not the only way to use pyextremes and that learning the library would allow for more flexibility when doing analysis. Example You can use pyextremes.get_extremes , pyextremes.extremes.block_maxima.get_extremes_block_maxima , or pyextremes.extremes.peaks_over_threshold.get_extremes_peaks_over_threshold functions instead of the EVA.get_extremes method to extract extreme values. Those are fully equivalent and, in fact, the EVA class uses the pyextremes.get_extremes function (which, in turn, usese the other two) behind the scenes.","title":"Read First"},{"location":"user-guide/read-first/#disclaimer","text":"pyextremes was created to make the process of running EVA simpler and faster. While the project is built with reasonable defaults which produce good results in most cases, one should not rely on the model as a source of ground truth. It is always the responsibility of the user to understand the subject of analysis and to properly interpret the model outputs. Example A 1000-year wave height of 50 meters is not physical and is an artifact of the underlying statistical model. One should always be mindful of the actual process being modeled and remember that the model gives a proabilistic estimate of extreme values under the assumption that the selected model (e.g. GEVD or GPD ) correctly describes the real process.","title":"Disclaimer"},{"location":"user-guide/read-first/#tutorial-structure","text":"pyextremes consists of individual components (e.g. extreme value extraction, model fitting, visualization, etc.) which can be used to perform a variety of tasks related to EVA . In order to make life easier, these components were grouped together in a helper class EVA (located in pyextremes.eva.EVA ) to implement the most common workflow of EVA . Because of this, almost every problem can generally be solved using either EVA or one or more individual components. This allows for the library to be flexible and makes it easy to integrate into custom workflows. Each tutorial section covers a particular area of EVA , such as extreme value extraction. Solutions are presented both using the EVA class and individual component used by the EVA class behind the scenes. Users should be aware that the EVA class shown earlier is not the only way to use pyextremes and that learning the library would allow for more flexibility when doing analysis. Example You can use pyextremes.get_extremes , pyextremes.extremes.block_maxima.get_extremes_block_maxima , or pyextremes.extremes.peaks_over_threshold.get_extremes_peaks_over_threshold functions instead of the EVA.get_extremes method to extract extreme values. Those are fully equivalent and, in fact, the EVA class uses the pyextremes.get_extremes function (which, in turn, usese the other two) behind the scenes.","title":"Tutorial Structure"},{"location":"user-guide/extremes-extraction/introduction/","text":"Modern EVA recognizes two types of extreme values: Block maxima ( BM ) Peaks over threshold ( POT ) The BM and POT extreme values are used to apply a statistical model ( GEVD or GPD accordingly) to allow for estimation of extreme events of an arbitrary probability of exceedance (return period). Both of these extreme value types represent a valid path of performing EVA and neither of these is generally better than another. Info GEVD and GPD models used for BM and POT extreme value types accordingly have a common theoretical basis and should be treated as complementary models, not as either/or. More information about why only the GEVD and GPD models should be used and the underlying theory are (briefly) covered in subsequent sections of this tutorial. Block Maxima \u00b6 The Block Maxima extreme values are extracted by selecting a block size (typically 1 year, also the default in pyextremes), then partitioning time series of your signal into equal consequtive blocks of this size, and for each block getting single maximum value (thus, block maxima). The resulting BM time series are then used to model extreme value behavior using the GEVD model family. See figure below illustrating this concept: Peaks Over Threshold \u00b6 The Peaks Over Threshold extreme values are extracted by choosing a threshold and selecting values higher or lower (depends on which extreme process is analyzed) than the threshold value. The selected values are then declustered by specifying minimum distance between adjacent extreme events (e.g. 24 hours, which implies that events separated by this distance are independent). Selection of threshold and declustering distance is not a trivial task and has a strong effect on the EVA results. pyextremes provides a series of tools which help with threshold selection, these are described further in this tutorial. See figure below illustrating POT extremes: Which Method to Use \u00b6 One of the most (if not the most) important concepts of EVA to keep in mind is that if the analysis is performed correctly, all models should be converging to the same answer (within reasonable confidence limits). Because of this, we cannot say that one method is better than another. Therefore, for a thorough analysis, user is advised to investigate both routes to make sure that the final answer of the analysis provides a robust estimate. A general rule of thumb, which is based on years of author's (subjective) experience, when performing EVA is to do the following: Use BM with a reasonable block size to avoid capturing seasonality (read more in the next section) to get the first estimates and to see how the extremes behave. Generally, BM is a \"simpler\" and more stable model which requires very little input from the user. Use POT with a reasonable threshold and declustering parameters (read more in the next section) to investigate how stable the model is in the region of target exceedance probabilities (return periods) and to gain more confidence in your results. Attention User is strongly discouraged from \"playing\" with the model parameters until a desired answer is achieved. EVA is not about getting a perfect estimate and a lack of a definitive answer is an answer in itself - it signifies that underlying process may be not random (e.g. seasonality or some trends were not removed prior to performing EVA ), that the model is poorly behaved for the data, or that there is simply not enough data to provide an accurate answer for a given probability. This is typically reflected by wide confidence intervals showing that the answer has high uncertainty. For example, your 100-year wind speed may be 50 knots (seems reasonable, right?) but the 95% confidence interval shows 10 to 120 knot uncertainty range - this clearly indicates that, while your answer happened to appear reasonable , the model is telling you that you cannot make any good faith judgement about the 100-year extreme event when using this data and methodology.","title":"Extreme Value Types"},{"location":"user-guide/extremes-extraction/introduction/#block-maxima","text":"The Block Maxima extreme values are extracted by selecting a block size (typically 1 year, also the default in pyextremes), then partitioning time series of your signal into equal consequtive blocks of this size, and for each block getting single maximum value (thus, block maxima). The resulting BM time series are then used to model extreme value behavior using the GEVD model family. See figure below illustrating this concept:","title":"Block Maxima"},{"location":"user-guide/extremes-extraction/introduction/#peaks-over-threshold","text":"The Peaks Over Threshold extreme values are extracted by choosing a threshold and selecting values higher or lower (depends on which extreme process is analyzed) than the threshold value. The selected values are then declustered by specifying minimum distance between adjacent extreme events (e.g. 24 hours, which implies that events separated by this distance are independent). Selection of threshold and declustering distance is not a trivial task and has a strong effect on the EVA results. pyextremes provides a series of tools which help with threshold selection, these are described further in this tutorial. See figure below illustrating POT extremes:","title":"Peaks Over Threshold"},{"location":"user-guide/extremes-extraction/introduction/#which-method-to-use","text":"One of the most (if not the most) important concepts of EVA to keep in mind is that if the analysis is performed correctly, all models should be converging to the same answer (within reasonable confidence limits). Because of this, we cannot say that one method is better than another. Therefore, for a thorough analysis, user is advised to investigate both routes to make sure that the final answer of the analysis provides a robust estimate. A general rule of thumb, which is based on years of author's (subjective) experience, when performing EVA is to do the following: Use BM with a reasonable block size to avoid capturing seasonality (read more in the next section) to get the first estimates and to see how the extremes behave. Generally, BM is a \"simpler\" and more stable model which requires very little input from the user. Use POT with a reasonable threshold and declustering parameters (read more in the next section) to investigate how stable the model is in the region of target exceedance probabilities (return periods) and to gain more confidence in your results. Attention User is strongly discouraged from \"playing\" with the model parameters until a desired answer is achieved. EVA is not about getting a perfect estimate and a lack of a definitive answer is an answer in itself - it signifies that underlying process may be not random (e.g. seasonality or some trends were not removed prior to performing EVA ), that the model is poorly behaved for the data, or that there is simply not enough data to provide an accurate answer for a given probability. This is typically reflected by wide confidence intervals showing that the answer has high uncertainty. For example, your 100-year wind speed may be 50 knots (seems reasonable, right?) but the 95% confidence interval shows 10 to 120 knot uncertainty range - this clearly indicates that, while your answer happened to appear reasonable , the model is telling you that you cannot make any good faith judgement about the 100-year extreme event when using this data and methodology.","title":"Which Method to Use"}]}